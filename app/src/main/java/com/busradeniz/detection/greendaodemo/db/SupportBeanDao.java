package com.busradeniz.detection.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.busradeniz.detection.bean.SupportBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUPPORT_BEAN".
*/
public class SupportBeanDao extends AbstractDao<SupportBean, Long> {

    public static final String TABLENAME = "SUPPORT_BEAN";

    /**
     * Properties of entity SupportBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property Data = new Property(2, String.class, "Data", false, "DATA");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property SelectedStatus = new Property(4, boolean.class, "selectedStatus", false, "SELECTED_STATUS");
    }


    public SupportBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SupportBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUPPORT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: _id
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"DATA\" TEXT," + // 2: Data
                "\"LOCATION\" TEXT," + // 3: location
                "\"SELECTED_STATUS\" INTEGER NOT NULL );"); // 4: selectedStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUPPORT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SupportBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String Data = entity.getData();
        if (Data != null) {
            stmt.bindString(3, Data);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
        stmt.bindLong(5, entity.getSelectedStatus() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SupportBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String Data = entity.getData();
        if (Data != null) {
            stmt.bindString(3, Data);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
        stmt.bindLong(5, entity.getSelectedStatus() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SupportBean readEntity(Cursor cursor, int offset) {
        SupportBean entity = new SupportBean( //
            cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Data
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.getShort(offset + 4) != 0 // selectedStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SupportBean entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSelectedStatus(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SupportBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SupportBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SupportBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
